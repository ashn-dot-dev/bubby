import "std";

import "bubby.sunder";

func test_value_to_string_to_value(x: *bubby::value) void {
    var s = std::string::init();
    defer s.fini();
    var writer = std::writer::init[[std::string]](&s);

    std::print_format(writer, "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](x)]);
    var y = bubby::value::init_from_str(s.data());
    if y.is_error() {
        std::print_format_line(
            std::err(),
            "error: {}",
            (:[]std::formatter)[
                std::formatter::init[[[]byte]](&y.error().*.data)]);
        return;
    }
    var y = y.value();
    defer y.fini();
    if not std::eq[[bubby::value]](x, &y) {
        std::print_format_line(
            std::err(),
            "value->string->value roundtrip error:\n\tx = {}\n\ty = {}",
            (:[]std::formatter)[
                std::formatter::init[[bubby::value]](x),
                std::formatter::init[[bubby::value]](&y)]);
        return;
    }
}

func main() void {
    var allocator = std::general_allocator::init();
    defer allocator.fini();
    defer {
        var iter = std::general_allocator_iterator::init(&allocator);
        for iter.advance() {
            var size = iter.current().*.size();
            std::print_format_line(
                std::err(),
                "leaked allocation of size {}",
                (:[]std::formatter)[
                    std::formatter::init[[usize]](&size)]);
        }
    }
    var allocator = std::allocator::init[[typeof(allocator)]](&allocator);
    std::set_global_allocator(allocator);

    std::print_line(std::out(), "BOOL");
    var x = bubby::value::init_bool(true);
    defer x.fini();
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);
    test_value_to_string_to_value(&x);

    var x = bubby::value::init_bool(false);
    defer x.fini();
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);
    test_value_to_string_to_value(&x);

    std::print(std::out(), "\n");
    std::print_line(std::out(), "INT");

    var x = bubby::value::init_int(0);
    defer x.fini();
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);
    test_value_to_string_to_value(&x);

    var x = bubby::value::init_int(+123);
    defer x.fini();
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);
    test_value_to_string_to_value(&x);

    var x = bubby::value::init_int(-123);
    defer x.fini();
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);
    test_value_to_string_to_value(&x);

    std::print(std::out(), "\n");
    std::print_line(std::out(), "NUMBER");

    var x = bubby::value::init_number(0.0);
    defer x.fini();
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);
    test_value_to_string_to_value(&x);

    var x = bubby::value::init_number(+123.5);
    defer x.fini();
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);
    test_value_to_string_to_value(&x);

    var x = bubby::value::init_number(-123.5);
    defer x.fini();
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);
    test_value_to_string_to_value(&x);

    std::print(std::out(), "\n");
    std::print_line(std::out(), "STRING");

    var x = bubby::value::init_string("foo");
    defer x.fini();
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);
    test_value_to_string_to_value(&x);

    var x = bubby::value::init_string("\\foo\tbar\nbaz\0\"qux\"");
    defer x.fini();
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);
    test_value_to_string_to_value(&x);

    std::print(std::out(), "\n");
    std::print_line(std::out(), "VECTOR");

    var x = bubby::value::init_vector();
    defer x.fini();
    x.vector().*.push(bubby::value::init_int(123));
    x.vector().*.push(bubby::value::init_number(123.5));
    x.vector().*.push(bubby::value::init_string("foo"));
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);
    test_value_to_string_to_value(&x);

    var x = bubby::value::init_vector();
    defer x.fini();
    x.vector().*.push(bubby::value::init_vector());
    x.vector().*.data()[0].vector().*.push(bubby::value::init_int(123));
    x.vector().*.data()[0].vector().*.push(bubby::value::init_number(123.5));
    x.vector().*.data()[0].vector().*.push(bubby::value::init_string("foo"));
    x.vector().*.push(bubby::value::init_vector());
    x.vector().*.data()[1].vector().*.push(bubby::value::init_vector());
    x.vector().*.data()[1].vector().*.data()[0].vector().*.push(bubby::value::init_vector());
    x.vector().*.data()[1].vector().*.data()[0].vector().*.data()[0].vector().*.push(bubby::value::init_int(42));
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);
    test_value_to_string_to_value(&x);

    std::print(std::out(), "\n");
    std::print_line(std::out(), "MAP");

    var x = bubby::value::init_map();
    defer x.fini();
    x.map().*.insert(bubby::value::init_int(123), bubby::value::init_string("foo"));
    x.map().*.insert(bubby::value::init_number(123.5), bubby::value::init_string("bar"));
    x.map().*.insert(bubby::value::init_string("str"), bubby::value::init_string("baz"));
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);
    test_value_to_string_to_value(&x);

    var x = bubby::value::init_map();
    defer x.fini();
    x.map().*.insert(bubby::value::init_int(123), bubby::value::init_map());
    var view = x.map().*.lookup_view(bubby::value::init_int(123));
    var view = view.value();
    view.value.*.map().*.insert(bubby::value::init_string("foo"), bubby::value::init_map());
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);
    test_value_to_string_to_value(&x);

    std::print(std::out(), "\n");
    std::print_line(std::out(), "SET");

    var x = bubby::value::init_set();
    defer x.fini();
    x.set().*.insert(bubby::value::init_int(123));
    x.set().*.insert(bubby::value::init_number(123.5));
    x.set().*.insert(bubby::value::init_string("str"));
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);
    test_value_to_string_to_value(&x);

    var x = bubby::value::init_set();
    defer x.fini();
    x.set().*.insert(bubby::value::init_set());
    var tmp = bubby::value::init_set();
    defer tmp.fini();
    var view = x.set().*.lookup_view(tmp);
    var view = view.value();
    view.*.set().*.insert(bubby::value::init_int(123));
    view.*.set().*.insert(bubby::value::init_string("foo"));
    view.*.set().*.insert(bubby::value::init_set());
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);
    test_value_to_string_to_value(&x);

    std::print(std::out(), "\n");
    std::print_line(std::out(), "PARSE BOOL");

    var result = bubby::parse_bool("true");
    var x = result.value().value;
    defer x.fini();
    assert x.bool();
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);

    var result = bubby::parse_bool("false");
    var x = result.value().value;
    defer x.fini();
    assert not x.bool();
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);

    var result = bubby::parse_bool("nope");
    std::print_line(std::out(), result.error().*.data);

    std::print(std::out(), "\n");
    std::print_line(std::out(), "PARSE INT");

    var result = bubby::parse_int("123");
    var x = result.value().value;
    defer x.fini();
    assert x.int() == 123;
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);

    var result = bubby::parse_int("+123");
    var x = result.value().value;
    defer x.fini();
    assert x.int() == +123;
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);

    var result = bubby::parse_int("-123");
    var x = result.value().value;
    defer x.fini();
    assert x.int() == -123;
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);

    var result = bubby::parse_int("nope");
    std::print_line(std::out(), result.error().*.data);

    std::print(std::out(), "\n");
    std::print_line(std::out(), "PARSE NUMBER");

    var result = bubby::parse_number("123.5");
    var x = result.value().value;
    defer x.fini();
    assert x.number() == 123.5;
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);

    var result = bubby::parse_number("+123.5");
    var x = result.value().value;
    defer x.fini();
    assert x.number() == +123.5;
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);

    var result = bubby::parse_number("-123.5");
    var x = result.value().value;
    defer x.fini();
    assert x.number() == -123.5;
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);

    var result = bubby::parse_number("nope");
    std::print_line(std::out(), result.error().*.data);

    std::print(std::out(), "\n");
    std::print_line(std::out(), "PARSE STRING");

    var result = bubby::parse_string("\"foo\"");
    var x = result.value().value;
    defer x.fini();
    assert std::str::eq(x.string(), "foo");
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);

    var result = bubby::parse_string("\"\\x5Cfoo\\x09bar\\x0Abaz\\x00\\x22qux\\x22\"");
    var x = result.value().value;
    defer x.fini();
    assert std::str::eq(x.string(), "\\foo\tbar\nbaz\0\"qux\"");
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);

    var result = bubby::parse_string("nope");
    std::print_line(std::out(), result.error().*.data);

    std::print(std::out(), "\n");
    std::print_line(std::out(), "PARSE VECTOR");

    var result = bubby::parse_vector("[123 \"foo\" [({})]]");
    var x = result.value().value;
    defer x.fini();
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);

    var result = bubby::parse_vector("[ 123 456   789 ]");
    var x = result.value().value;
    defer x.fini();
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);

    var result = bubby::parse_vector("[123\"foo\"]");
    std::print_line(std::out(), result.error().*.data);

    # Empty string.
    var result = bubby::parse_vector("");
    std::print_line(std::out(), result.error().*.data);

    # Missing opening '['.
    var result = bubby::parse_vector("]");
    std::print_line(std::out(), result.error().*.data);

    # Missing closing ']'.
    var result = bubby::parse_vector("[");
    std::print_line(std::out(), result.error().*.data);

    std::print(std::out(), "\n");
    std::print_line(std::out(), "PARSE MAP");

    var result = bubby::parse_map("{\"foo\" 123 \"bar\" [({})]}");
    var x = result.value().value;
    defer x.fini();
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);

    var result = bubby::parse_map("{ \"foo\" 123 \"bar\"   456   }");
    var x = result.value().value;
    defer x.fini();
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);

    var result = bubby::parse_map("{\"foo\" 123 \"foo\" 456}");
    std::print_line(std::out(), result.error().*.data);

    var result = bubby::parse_map("{123\"foo\"}");
    std::print_line(std::out(), result.error().*.data);

    var result = bubby::parse_map("{123 \"foo\"456 \"bar\"}");
    std::print_line(std::out(), result.error().*.data);

    # Empty string.
    var result = bubby::parse_map("");
    std::print_line(std::out(), result.error().*.data);

    # Missing opening '{'.
    var result = bubby::parse_map("}");
    std::print_line(std::out(), result.error().*.data);

    # Missing closing '}'.
    var result = bubby::parse_map("{");
    std::print_line(std::out(), result.error().*.data);

    std::print(std::out(), "\n");
    std::print_line(std::out(), "PARSE SET");

    var result = bubby::parse_set("(123 \"foo\" [({})])");
    var x = result.value().value;
    defer x.fini();
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);

    var result = bubby::parse_set("( 123 456   789 )");
    var x = result.value().value;
    defer x.fini();
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);

    var result = bubby::parse_set("(123 123)");
    std::print_line(std::out(), result.error().*.data);

    var result = bubby::parse_set("(123\"foo\")");
    std::print_line(std::out(), result.error().*.data);

    # Empty string.
    var result = bubby::parse_set("");
    std::print_line(std::out(), result.error().*.data);

    # Missing opening '('.
    var result = bubby::parse_set(")");
    std::print_line(std::out(), result.error().*.data);

    # Missing closing ')'.
    var result = bubby::parse_set("(");
    std::print_line(std::out(), result.error().*.data);
}
################################################################################
# BOOL
# true
# false
#
# INT
# 0
# 123
# -123
#
# NUMBER
# 0.0
# 123.5
# -123.5
#
# STRING
# "foo"
# "\x5Cfoo\x09bar\x0Abaz\x00\x22qux\x22"
#
# VECTOR
# [123 123.5 "foo"]
# [[123 123.5 "foo"] [[[42]]]]
#
# MAP
# {123 "foo" 123.5 "bar" "str" "baz"}
# {123 {"foo" {}}}
#
# SET
# (123 123.5 "str")
# ((123 "foo" ()))
#
# PARSE BOOL
# true
# false
# parse failure
#
# PARSE INT
# 123
# 123
# -123
# parse failure
#
# PARSE NUMBER
# 123.5
# 123.5
# -123.5
# parse failure
#
# PARSE STRING
# "foo"
# "\x5Cfoo\x09bar\x0Abaz\x00\x22qux\x22"
# parse failure
#
# PARSE VECTOR
# [123 "foo" [({})]]
# [123 456 789]
# parse failure
# parse failure
# parse failure
# parse failure
#
# PARSE MAP
# {"foo" 123 "bar" [({})]}
# {"foo" 123 "bar" 456}
# duplicate map key
# parse failure
# parse failure
# parse failure
# parse failure
# parse failure
#
# PARSE SET
# (123 "foo" [({})])
# (123 456 789)
# duplicate set element
# parse failure
# parse failure
# parse failure
# parse failure
